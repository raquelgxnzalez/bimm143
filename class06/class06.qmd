---
title: "Class 6: R Functions"
author: "Raquel Gonzalez (PID: A1207442)"
date: 01/25/24
format: pdf
editor: visual

---

## R Functions

Functions are how we get stuff done. We call functions to do everything useful in R. 

One cool thing about R is that it makes writing your own functions comparatively easy. 

All functions in R have at least 3 things:

- A **name** (we get to pick this)
- One or more **input arguments** (the input to our function)
- The **body** (lines of code that do the work)

```{r}
#| eval: false

funname <- function(input1, input2) {
  # The body with R code
}
```

Let's write a silly first function to add two numbers:

```{r}
x <- 5
y <- 1
x + y
```

```{r}
addme <- function(x, y=1) {
  x + y
}
```

```{r}
addme(100, 100)
```

```{r}
addme(10)
```

## Lab for today

Write a function `grade()` to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. 

```{r}
student1<-c(100,100,100,100,100,100,100,90)
student2<-c(100,NA,90,90,90,90,97,80) 
student3<-c(90,NA,NA,NA,NA,NA,NA,NA)
```

```{r}
grade <- function(x){
  mean(x, na.rm = TRUE)
}
```

```{r}
grade(student1)
grade(student2)
grade(student3)
```

This is not fair, the average grade of student3 should not be 90!

We want to drop the lowest score before getting the `mean()`

How do I find the lowest (minimum) score?

```{r}
student1
```

```{r}
min(student1)
```

I found the `which.min()` function. Maybe this is more useful?

```{r}
which.min(student1)
```

Cool- it is the 8th element of the vector that has the lowest score. Can I remove this one?

```{r}
student1[which.min(student1)]
```

We can use the wee minus trick for indexing.

```{r}
x = 1:5
x[-3]
```

Now put these bits of knowledge together to make some code that identifies and drops the lowest score (element of the input vector) and then calculate the mean.

```{r}
#Find the lowest score
ind <- which.min(student1)
# Remove the lowest score and find the mean
mean(student1[-ind])
```

```{r}
mean(student1[-which.min(student1)])
```

Use a common schortcut and us `x` as my input

```{r}
x <- student1
mean(x[-which.min(x)])
```

We still have the problem of missing values.

One idea is to replace NA values with zero.

```{r}
y <- 1:5
y[y==3] <- 10000
y
```

Bummer, this is no good.

```{r}
y <- c(1, 2, NA, 4, 5)
y == NA
```


```{r}
y
is.na(y)
```

How can I remove the NA elements from the vector?


```{r}
y[is.na(y)] <- 0
y
```

OK, let's solve this:


```{r}
x <- student3

# Map NA values to Zero
x[is.na(x)] <- 0
# Find and remove the min value and get the mean
mean(x[-which.min(x)])
```

Last step now that I have my working code snippet is to make my `grade()` function.

> Q1: Write a function `grade()` to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework(i.e.has an NA value) this can be used as a score to be potentially dropped.Your final function should be adquately explained with code comments and be able to work on an example class gradebook such as this one in CSV format: “https://tinyurl.com/gradeinput” [3pts]


```{r}
grade <- function(x) {
  # Change NA values to 0
  x[is.na(x)] <- 0
  # Find and remove the min value and get the mean
  mean(x[-which.min(x)])
}
```

```{r}
grade(student1)
grade(student2)
grade(student3)
```

Now read the online gradebook (CSV file)

```{r}
url <- "https://tinyurl.com/gradeinput"
gradebook <- read.csv(url, row.names = 1)

head(gradebook)

```

```{r}
# Use 1 for rows (student's grades)
results <- apply(gradebook, 1, grade)
results
```

> Q2: Using your `grade()` function and the supplied gradebook, Who is the top scoring student overall in the gradebook? [3pts]

```{r}
results[which.max(results)]
```

> Q3: From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall?  [2pts]

```{r}
# Use 2 for columns (homework scores)
apply(gradebook, 2, sum, na.rm=T)
which.min(apply(gradebook, 2, sum, na.rm=T))
```

> Q4: From your analysis of the gradebook, which homework was most  predictive of overall score (i.e. highest correlation with average grade score)? [1pt]

```{r}
# Make all (or mask) the NA values to zero
mask <- gradebook
mask[is.na(mask)] <- 0
#mask
```

We can use the `cor()` function for correlation analysis.

```{r}
# Apply individually
cor(mask$hw5, results)
cor(mask$hw3, results)
```

I need to use the `apply()` function to run this analysis over the whole course (i.e. masked gradebook)

```{r}
# Apply to entire gradebook
apply(mask, 2, cor, results)
```

> Q5. Make sure you save your Quarto document and can click the “Render” (or Rmarkdown "Knit") button to generate a PDF format report without errors. Finally, submit your PDF to gradescope. [1pt]