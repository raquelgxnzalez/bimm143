---
title: "Class 8: Breast Cancer Mini Project"
author: "Raquel Gonzalez (PID:A16207442)"
format: pdf
editor: visual
---

Before we get stuck into project work, we will have a quick look at applying PCA to some exampled RNAseq data (tail end of lab 7).

Read the data (detailed in lab 7)

```{r}
url2 <-  "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```

> Q: How many genes are in this dataset?

```{r}
nrow(rna.data)
```

# Run PCA

```{r}
## Again we have to take the transpose of our data 
pca <- prcomp(t(rna.data), scale=TRUE)
 
## Simple un polished plot of pc1 and pc2
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2")
```

```{r}
summary(pca)
```

```{r}
# We have 5 wt and 5 ko samples
mycols <- c(rep("blue", 5), rep("red", 5))
mycols
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", col=mycols)
```

I could examine which genes contribute most to this first PC.

```{r}
head(sort(abs(pca$rotation[,1]), decreasing = T))
```

# Analysis of Breast Cancer FNA Data

```{r}
# Save your input data file into your Project directory
fna.data <- "WisconsinCancer.csv"

# Complete the following code to input the data and store as wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
head(wisc.df)
```

Note that the first column here wisc.df\$diagnosis is a pathologist provided expert diagnosis.

```{r}
# Create diagnosis vector for later 
diagnosis <- as.factor(wisc.df$diagnosis)

# We can use -1 here to remove the first column
wisc.data <- wisc.df[,-1]
head(wisc.data)
```

> Q1: How many observations are in this dataset?

```{r}
nrow(wisc.df)
```

There are 569 observations in this dataset.

> Q2: How many observations have a malignant diagnosis?

```{r}
table(wisc.df$diagnosis)
```

There are 212 observations with a malignant diagnosis.

> Q3: How many variables/features in the data are suffixed with `_mean`?

```{r}
length(grep("_mean", colnames(wisc.df)))
```

There are 10 variables suffixed with _mean.

## Principal Component Analysis

Here we will use `prcomp()` on the `wisc.data` object- the one without the diagnosis column.

First, we have to decide whether to use the `scale=TRUE` argument when we run `prcomp()`.

We can look at the means and sd of each column. If they are similar, then we are all good to go. If not, we should use `scale=TRUE`.

```{r}
# Check column means and standard deviations
colMeans(wisc.data)
apply(wisc.data, 2, sd)
```

These are very different so we should scale=TRUE

```{r}
#Perform PCA on wisc.data by completing the following code
wisc.pr <- prcomp(wisc.data, scale=TRUE)

#Look at summary of results
summary(wisc.pr)
```

> Q4: From your results, what proportion of the original variance is captured by the first principal components (PC1)?

**44.27%** of the original variance is captured by the first principal components (PC1).

> Q5: How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

**3 principal components** (PC3) are required. They capture **72.64%** of the original variance in the data.

> Q6: How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

**7 principal components** (PC7) are required. They capture **91.01%** of the original variance in the data.

### Plotting the PCA Results

```{r}
#biplot(wisc.pr)
```

> Q7: What stands out to you about this plot? Is it easy or difficult to understand? Why?

This plot is very difficult to understand, as the data is too large to neatly observe in a plot of this nature.

```{r}
attributes(wisc.pr)
```

```{r}
plot(wisc.pr$x[,1],wisc.pr$x[,2], col=diagnosis, xlab = "PC1", ylab = "PC2") 
```

```{r}
library(ggplot2)

pc <- as.data.frame(wisc.pr$x)

ggplot(pc) + 
  aes(PC1, PC2, col=diagnosis) + 
  geom_point()
```

> Q8: Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

```{r}
library(ggplot2)

pc <- as.data.frame(wisc.pr$x)

ggplot(pc) + 
  aes(PC1, PC3, col=diagnosis) + 
  geom_point()
```

The PC1 vs PC2 plot has a cleaner separation of the two diagnoses, which suggests that PC1 captures this separation more strongly. This is supported by the fact the PC1 alone captures the bulk of the original variance. 

> Q9: For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean?

```{r}
wisc.pr$rotation["concave.points_mean",1]
```

The component of the loading vector is -0.26. 

> Q10: What is the minimum number of principal components required to explain 80% of the variance of the data?

```{r}
tbl <- summary(wisc.pr)
which(tbl$importance[3,] > 0.8)[1]
```


**5 principal components**(PC5) are required. They capture **84.73%** of the original variance in the data.

## Hierarchical Clustering

The main function for Hierarchical Clustering is called `hclust()`. It takes a distance matrix as input. 

```{r}
d <- dist(scale(wisc.data))
wisc.hclust <- hclust(d)
plot(wisc.hclust)
```

```{r}
plot(wisc.hclust)
abline(h=18, col="red")
grps <- cutree(wisc.hclust, h=18)
table(grps)
```

Come back here later to see how our cluster grps correspond to M or B groups. 

```{r}
ggplot(pc) + 
  aes(PC1, PC2, col=diagnosis) + 
  geom_point()
```

## Combining Methods

Here we will perform clustering on our PCA results rather than the original data. 

In other words, we will cluster using `wisc.pr$x` - our new better variables or PCs. We can choose as many or as few PCs to use as we like. It is your call!

```{r}
d.pc <- dist(wisc.pr$x[,1:3])

wisc.pr.hsclust <- hclust( d.pc, method="ward.D2")
plot(wisc.pr.hsclust)
abline(h=80, col="red")
```

```{r}
grps <- cutree(wisc.pr.hsclust, h=80)
table(grps)
```

We can use this `table()` function to make a cross-table as well as a count table.

```{r}
table(diagnosis)
```

```{r}
table(grps, diagnosis)
```

The results indicate that our cluster 1 mostly captures cancer(M) and our cluster 2 mostly captures healthy(B) samples/individuals.

## Prediction

```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```

And plot this up!
```{r}
plot(wisc.pr$x[,1:2], col=grps)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```

> Q17: **SKIP**

> Q18: Which of these new patients should we prioritize for follow up based on your results?

Patients from cluster 2.  